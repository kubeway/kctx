#!/bin/bash
#****************************************************************#
# Create Date: 2020-04-04 00:09
#********************************* ******************************#

##################### BASH SETTING #####################
# Treat unset variables as an error
set -o nounset
set +u

BASEDIR=$(dirname "$0")

##################### set kube context tmp file path #####################
SAVE_BASE_DIR="/tmp/"
KUBECONFIG_FILE_PATH="${SAVE_BASE_DIR}/${TERM_SESSION_ID}"
NAMESPACE_FILE_PATH="${SAVE_BASE_DIR}/${TERM_SESSION_ID}"
if [ ! -z "${TMUX_PANE}" ]; then
  KUBECONFIG_FILE_PATH="${KUBECONFIG_FILE_PATH}-${TMUX_PANE}"
  NAMESPACE_FILE_PATH="${NAMESPACE_FILE_PATH}-${TMUX_PANE}"
fi
KUBECONFIG_FILE_PATH="${KUBECONFIG_FILE_PATH}-kubeconfig"
NAMESPACE_FILE_PATH="${NAMESPACE_FILE_PATH}-namespace"

##################### HELP #####################
__ScriptName=$(basename ${BASH_SOURCE[0]})
usage() {
    cat << EOT

Usage : ${__ScriptName} [OPTION] ...
  kubernete context 

Options:
  -h, --help                    Display this message
  -n, --namespace         show or use namespace
  -s, --set show or set kubeconfig file
  -l, --list list  kubeconfig files
  -c, --clear  kubernete context
  -p, --print print kubernetes context info

EOT
}   # ----------  end of function usage  ----------

kubectl_cmd() {
  ns="default"
  if [ -f "${NAMESPACE_FILE_PATH}" ]; then
    ns=$(cat "${NAMESPACE_FILE_PATH}")
  fi
  
  if [ -f "${KUBECONFIG_FILE_PATH}" ]; then
    kubeconfig=$(cat "${KUBECONFIG_FILE_PATH}")
    kubectl --kubeconfig=${kubeconfig} -n ${ns} ${@}
  else
    kubectl -n ${ns} ${@}
  fi
}

KUBECONFIG_FILE=
NAMESPACE=
K8S_SYMBOL=

##################### FUNCTIONS #####################

list_kubeconfigs() {
  ls -al $HOME/.kube/config*|awk '{print $NF}' 
  exit 0
}

set_kubeconfig_file() {
  kubeconfig=$1
  if [ -z "${kubeconfig}" ]; then
      list_kubeconfigs
      exit 0
  fi
  echo $kubeconfig > "${KUBECONFIG_FILE_PATH}" 
  echo "default" >"${NAMESPACE_FILE_PATH}"
  exit 0
}

set_namespace_file() {
  ns=$1
  if [ "${ns}" == "" ]; then
      kubectl_cmd get ns
      exit 0
  fi

  echo "${ns}" >"${NAMESPACE_FILE_PATH}"
  exit 0
}

clear_kubecon_file(){
  rm -rf "${KUBECONFIG_FILE_PATH}" 
  rm -rf "${NAMESPACE_FILE_PATH}"
  exit 0
}

print_k_context(){
  ns=""
  kconfig=""
  if [ -f "${NAMESPACE_FILE_PATH}" ]; then
    ns=$(cat ${NAMESPACE_FILE_PATH})
  fi

  if [ -f "${KUBECONFIG_FILE_PATH}" ]; then
    kconfig="$(cat ${KUBECONFIG_FILE_PATH})"
  fi
  echo "namespaces:[${ns}] kubeconfig:[${kconfig}]"
  exit 0
}

if [ $# -eq 0 ]; then 
  list_kubeconfigs
  exit 0; 
fi

# ##################### PARSE OPTIONS #####################
POSITIONAL=()
 while [[ $# -gt 0 ]]; do
   key="$1"
   case "$1" in
     ls | -l | -ls | --list )
         list_kubeconfigs
         exit 0
         ;;

     -v | --version )
         echo "$(basename $0) -- version v0.2";
         exit 1
         ;;

     n | -n | --namespace )
         set_namespace_file $2
         shift 2 ;;

     s | -s | --select )
         set_kubeconfig_file $2
         shift 2 ;;
     c | -c | --clear)
         clear_kubecon_file
         shift 2 ;;
     p | -p | --print )
         print_k_context
         shift 2 ;;

     -h | --help )
         usage; 
         exit 1
         ;;
     -- ) shift; break ;;
     * ) echo "internal error!" ; exit 1 ;;
   esac
 done
set -- "${POSITIONAL[@]}" # restore positional parameters

