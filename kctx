#!/bin/zsh
#****************************************************************#
# Create Date: 2020-04-04 00:09
#********************************* ******************************#

##################### BASH SETTING #####################
# Treat unset variables as an error
set -o nounset
set +u

BASEDIR=$(dirname "$0")

##################### set kube context tmp file path #####################
SAVE_BASE_DIR="/tmp/"
KUBECONFIG_FILE_PATH="${SAVE_BASE_DIR}/${TERM_SESSION_ID}"
NAMESPACE_FILE_PATH="${SAVE_BASE_DIR}/${TERM_SESSION_ID}"
if [ ! -z "${TMUX_PANE}" ]; then
  KUBECONFIG_FILE_PATH="${KUBECONFIG_FILE_PATH}-${TMUX_PANE}"
  NAMESPACE_FILE_PATH="${NAMESPACE_FILE_PATH}-${TMUX_PANE}"
fi
KUBECONFIG_FILE_PATH="${KUBECONFIG_FILE_PATH}-kubeconfig"
NAMESPACE_FILE_PATH="${NAMESPACE_FILE_PATH}-namespace"

##################### HELP #####################
__ScriptName=$(basename ${0})
usage() {
    cat << EOT

Usage : ${__ScriptName} [OPTION] ...
  kubernete context 

Options:
  -h, --help                    Display this message
  -n, --namespace         show or use namespace
  -s, --set show or set kubeconfig file
  -l, --list list  kubeconfig files
  -c, --clear  kubernete context
  -p, --print print kubernetes context info

EOT
}   # ----------  end of function usage  ----------

kubectl_get_ns() {
  ns="default"
  if [ -f "${NAMESPACE_FILE_PATH}" ]; then
    ns=$(cat "${NAMESPACE_FILE_PATH}")
  fi
  
  if [ -f "${KUBECONFIG_FILE_PATH}" ]; then
    kubeconfig=$(cat "${KUBECONFIG_FILE_PATH}")
    kubectl --kubeconfig=${kubeconfig} get ns
  else
    kubectl get ns
  fi
}

KUBECONFIG_FILE=
NAMESPACE=
K8S_SYMBOL=

##################### FUNCTIONS #####################

list_kubeconfigs() {
    GREENB='\033[0;41m'    # Green Background (Color verde de fondo)
    GREEN='\033[0;32m'     # Green Text (Color verde en el texto
    REDB='\033[0;41m'      # Red Background (Color rojo de fondo)
    RED='\033[0;31m'       # Red text (Color rojo en el texto)
    NORMALB='\033[0;49m'   # Default background (Color por defecto de fondo)
    NORMAL='\033[0m'       # Default foreground (Color por defecto del texto)

    echo "normal configs:"
    ls -al $HOME/.kube/config*|awk '{print "  "$NF}' 

    echo -e "\n\n\x1b[1monline configs:"
    ls -al $HOME/.kube/online/config*|awk -v COLOR=${RED} '{print COLOR"  "$NF}' 
    exit 0
}

set_kubeconfig_file() {
  kubeconfig=$1
  if [ -z "${kubeconfig}" ]; then
      list_kubeconfigs
      exit 0
  fi
  echo $kubeconfig > "${KUBECONFIG_FILE_PATH}" 
  echo "default" >"${NAMESPACE_FILE_PATH}"
  exit 0
}

set_namespace_file() {
  ns=$1
  if [ -z "${ns}" ]; then
      kubectl_get_ns 
      exit 0
  fi

  echo "${ns}" >"${NAMESPACE_FILE_PATH}"
  exit 0
}

clear_kubecon_file(){
  rm -rf "${KUBECONFIG_FILE_PATH}" 
  rm -rf "${NAMESPACE_FILE_PATH}"
  exit 0
}

print_k_context(){
  ns=""
  kconfig=""
  if [ -f "${NAMESPACE_FILE_PATH}" ]; then
    ns=$(cat ${NAMESPACE_FILE_PATH})
  fi

  if [ -f "${KUBECONFIG_FILE_PATH}" ]; then
    kconfig="$(cat ${KUBECONFIG_FILE_PATH})"
  fi
  echo "--kubeconfig=${kconfig} --namespace=${ns} "
  exit 0
}

get_kube_ctx(){
  # symbol=""
  kubeconfig=""
  ns=""
  if [ -f "${KUBECONFIG_FILE_PATH}" ]; then
    f=$(cat "${KUBECONFIG_FILE_PATH}")
    if [ ! -z "${f}" ]; then
      if [ -f "${f}" ]; then
        _kubeconfig=$(basename $f)
        kubeconfig=$_kubeconfig[8,-1]
        ns="default"
        # symbol="$(${BASEDIR}/kube-symbol.sh)"
      fi
    fi
  fi

  if [ -f "${NAMESPACE_FILE_PATH}" ]; then
    _ns=$(cat "${NAMESPACE_FILE_PATH}")
    if [ ! -z "${_ns}" ]; then
      ns="${_ns}"
    fi
  fi
  # [ ! -z "$kubeconfig" ] && printf "\e[32;40m${kubeconfig}\e[m:\e[37;33m${ns}\e[m"
  [ ! -z "$kubeconfig" ] && echo -n "${kubeconfig}:${ns}"
  exit 0
}

_kube_args(){
  local args=""
  
  if [ -f "${KUBECONFIG_FILE_PATH}" ]; then
    kubeconfig=$(cat "${KUBECONFIG_FILE_PATH}")
    if [ ! -z "${kubeconfig}" ]; then
      if [ -f "${kubeconfig}" ]; then
        args="${args} --kubeconfig=${kubeconfig} "
      fi
    fi
  fi

  if [ -f "${NAMESPACE_FILE_PATH}" ]; then
    ns=$(cat "${NAMESPACE_FILE_PATH}")
    if [ -z "${ns}" ]; then
      ns="default"
    fi
    args="${args} -n ${ns} "
  fi

  echo -n "$(echo ${args}) ${@}"
}

get_kubectl_cmd(){
    echo -n "kubectl $(_kube_args) ${@}"
  exit 0
}

get_helm_cmd(){
    echo -n "helm $(_kube_args) ${@}"
  exit 0
}

if [ $# -eq 0 ]; then 
  list_kubeconfigs
  exit 0; 
fi

# ##################### PARSE OPTIONS #####################
POSITIONAL=()
 while [[ $# -gt 0 ]]; do
   key="$1"
   case "$1" in
     ls | -l | -ls | --list )
         list_kubeconfigs
         exit 0
         ;;

     -v | --version )
         echo "$(basename $0) -- version v0.2";
         exit 0
         ;;

     n | -n | --namespace )
         set_namespace_file $2
         shift 2 ;;
         exit 0

     s | -s | --select )
         set_kubeconfig_file $2
         shift 2 ;;
         exit 0
     c | -c | --clear)
         clear_kubecon_file
         shift 2 ;;
         exit 0
     p | -p | --print )
         print_k_context
         shift 2 ;;
         exit 0
     --get-kube-ctx )
         get_kube_ctx
         shift 1 ;;
         exit 0
     --get-kubectl-cmd )
         get_kubectl_cmd 
         shift 1 ;;
         exit 0
         exit 0
     --get-helm-cmd )
         get_helm_cmd 
         shift 1 ;;
         exit 0

     -h | --help )
         usage; 
         exit 0
         ;;
     -- ) shift; break ;;
     * ) echo "internal error!" ; exit 1 ;;
   esac
 done
set -- "${POSITIONAL[@]}" # restore positional parameters

